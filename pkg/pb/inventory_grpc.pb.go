// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: pkg/pb/inventory.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InventoryProtoService_FindRecords_FullMethodName      = "/inventory.InventoryProtoService/FindRecords"
	InventoryProtoService_CreateInventory_FullMethodName  = "/inventory.InventoryProtoService/CreateInventory"
	InventoryProtoService_GetInventoryList_FullMethodName = "/inventory.InventoryProtoService/GetInventoryList"
)

// InventoryProtoServiceClient is the client API for InventoryProtoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InventoryProtoServiceClient interface {
	FindRecords(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*FindRecordsResponse, error)
	CreateInventory(ctx context.Context, in *CreateInventoryRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	GetInventoryList(ctx context.Context, in *PaginationRequest, opts ...grpc.CallOption) (*GetInventoryResponse, error)
}

type inventoryProtoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInventoryProtoServiceClient(cc grpc.ClientConnInterface) InventoryProtoServiceClient {
	return &inventoryProtoServiceClient{cc}
}

func (c *inventoryProtoServiceClient) FindRecords(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*FindRecordsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindRecordsResponse)
	err := c.cc.Invoke(ctx, InventoryProtoService_FindRecords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryProtoServiceClient) CreateInventory(ctx context.Context, in *CreateInventoryRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, InventoryProtoService_CreateInventory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryProtoServiceClient) GetInventoryList(ctx context.Context, in *PaginationRequest, opts ...grpc.CallOption) (*GetInventoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInventoryResponse)
	err := c.cc.Invoke(ctx, InventoryProtoService_GetInventoryList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InventoryProtoServiceServer is the server API for InventoryProtoService service.
// All implementations must embed UnimplementedInventoryProtoServiceServer
// for forward compatibility.
type InventoryProtoServiceServer interface {
	FindRecords(context.Context, *EmptyRequest) (*FindRecordsResponse, error)
	CreateInventory(context.Context, *CreateInventoryRequest) (*EmptyResponse, error)
	GetInventoryList(context.Context, *PaginationRequest) (*GetInventoryResponse, error)
	mustEmbedUnimplementedInventoryProtoServiceServer()
}

// UnimplementedInventoryProtoServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInventoryProtoServiceServer struct{}

func (UnimplementedInventoryProtoServiceServer) FindRecords(context.Context, *EmptyRequest) (*FindRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindRecords not implemented")
}
func (UnimplementedInventoryProtoServiceServer) CreateInventory(context.Context, *CreateInventoryRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInventory not implemented")
}
func (UnimplementedInventoryProtoServiceServer) GetInventoryList(context.Context, *PaginationRequest) (*GetInventoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInventoryList not implemented")
}
func (UnimplementedInventoryProtoServiceServer) mustEmbedUnimplementedInventoryProtoServiceServer() {}
func (UnimplementedInventoryProtoServiceServer) testEmbeddedByValue()                               {}

// UnsafeInventoryProtoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InventoryProtoServiceServer will
// result in compilation errors.
type UnsafeInventoryProtoServiceServer interface {
	mustEmbedUnimplementedInventoryProtoServiceServer()
}

func RegisterInventoryProtoServiceServer(s grpc.ServiceRegistrar, srv InventoryProtoServiceServer) {
	// If the following call pancis, it indicates UnimplementedInventoryProtoServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InventoryProtoService_ServiceDesc, srv)
}

func _InventoryProtoService_FindRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryProtoServiceServer).FindRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryProtoService_FindRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryProtoServiceServer).FindRecords(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryProtoService_CreateInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryProtoServiceServer).CreateInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryProtoService_CreateInventory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryProtoServiceServer).CreateInventory(ctx, req.(*CreateInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryProtoService_GetInventoryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryProtoServiceServer).GetInventoryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryProtoService_GetInventoryList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryProtoServiceServer).GetInventoryList(ctx, req.(*PaginationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InventoryProtoService_ServiceDesc is the grpc.ServiceDesc for InventoryProtoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InventoryProtoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inventory.InventoryProtoService",
	HandlerType: (*InventoryProtoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindRecords",
			Handler:    _InventoryProtoService_FindRecords_Handler,
		},
		{
			MethodName: "CreateInventory",
			Handler:    _InventoryProtoService_CreateInventory_Handler,
		},
		{
			MethodName: "GetInventoryList",
			Handler:    _InventoryProtoService_GetInventoryList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/pb/inventory.proto",
}
